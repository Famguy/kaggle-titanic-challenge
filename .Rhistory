demo()
smooth
smooth()
glm.vr
glm.vr()
ls
install.packages("conjoint")
install.packages("conjoint")
install.packages("conjoint")
update.packages()
y
ls
install.packages("DoE.base")
library(DoE.base)
oa.design(nlevels=c(2,2,3))
oa.design(nlevels=c(2,2,4))
oa.design(nlevels=c(6,4,3,3,2,2,8,4,3))
oa.design(nlevels=c(2,2,4))
oa.design(nlevels=c(3,3,3,3,3,3))
oa.design(nlevels=c(4,4,4,4,4,4))
oa.design(nlevels=c(6,3,3,3,3))
oa.design(nlevels=c(6,3,3,3,3,4))
oa.design(nlevels=c(6,3,3,3,3,2))
oa.design(nlevels=c(6,4,3,3,2,2))
oa.design(nlevels=c(6,4,3,3))
oa.design(nlevels=c(6,4,3,3,8))
oa.design(nlevels=c(6,4,3,3,6))
oa.design(nlevels=c(6,4,3,3,3,6))
oa.design(nlevels=c(6,4,3,3,4,3,6))
oa.design(nlevels=c(6,4,3,3,2,3,6))
oa.design(nlevels=c(6,4,3,3,2,3,2,6))
oa.design(nlevels=c(6,4,3,3,2,3,2,6,3))
oa.design(nlevels=c(6,4,3,3,2,3,2,6,4))
oa.design(nlevels=c(6,4,3,3,2,3,2,6,2))
oa.design(nlevels=c(6,4,3,3,2,3,2,6,3))
oa.design(nlevels=c(5,4,3,3,2,2,3))
oa.design(nlevels=c(4,4,3,3,2,2,3))
oa.design(nlevels=c(5,4,3,3,3))
oa.design(nlevels=c(5,4,3,3))
oa.design(nlevels=c(5,4,3))
oa.design(nlevels=c(4,4,3))
oa.design(nlevels=c(4,4,3,3))
oa.design(nlevels=c(4,4,2,2))
oa.design(nlevels=c(4,4,3,3))
oa.design(nlevels=c(4,4,2,2,3))
oa.design(nlevels=c(4,4,2,2))
oa.design(nlevels=c(4,4,3,3,2,2,2))
oa.design(nlevels=c(4,4,3,2,2,2,2))
oa.design(nlevels=c(4,4,2,2,2,2,2))
oa.design(nlevels=c(4,4,2,2,2,2,2,2))
oa.design(nlevels=c(4,4,2,2,2,2,2,2,2))
oa.design(nlevels=c(4,4,2,2,2,2,2,2,3))
oa.design(nlevels=c(4,4,2,2,2,2,2,2,4))
oa.design(nlevels=c(3,3,2,2,2,2,2,2,3))
oa.design(nlevels=c(4,4,2,2,2,2,2,2,4))
oa.design(nlevels=c(4,4,2,2,2,2,2,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4,4,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4,4,4,4,4))
oa.design(nlevels=c(4,4,2,2,2,2,4,4,5))
oa.design(nlevels=c(4,4,4,4,2,2,4,4))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,4))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(8,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(5,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,3,2,2,4,4,8))
oa.design(nlevels=c(4,4,3,3,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,3,2,2,4,4,6))
oa.design(nlevels=c(4,4,4,3,2,2,4,4,8))
oa.design(nlevels=c(4,4,4,4,2,2,4,4,8))
oa.design(nlevels=c(4,8))
oa.design(nlevels=c(4,8,2))
oa.design(nlevels=c(3,8))
oa.design(nlevels=c(3,8,3))
oa.design(nlevels=c(3,6,3))
oa.design(nlevels=c(3,6,3,2))
oa.design(nlevels=c(3,6,3,3))
oa.design(nlevels=c(6,3,3,3,6,4,3))
oa.design(nlevels=c(6,3,3,3,6,3,3))
oa.design(nlevels=c(6,3,3,3,3,3,3))
oa.design(nlevels=c(5,3,3,3,3,3,3))
oa.design(nlevels=c(6,3,3,3,3,3,3))
oa.design(nlevels=c(6,3,3,3,3,3,3,2))
oa.design(nlevels=c(6,3,3,3,3,3,2))
oa.design(nlevels=c(6,3,3,3,3,2))
oa.design(nlevels=c(6,32))
oa.design(nlevels=c(6,3,2))
oa.design(nlevels=c(6,3,3,3,3,3,3,3))
oa.design(nlevels=c(6,3,3,3,3,3,3))
oa.design(nlevels=c(6,3,3,3,3,3,4))
oa.design(nlevels=c(6,4))
oa.design(nlevels=c(6,4,3))
oa.design(nlevels=c(6,4,3,2))
oa.design(nlevels=c(6,4,2))
oa.design(nlevels=c(6,4,2,2))
oa.design(nlevels=c(6,4,2,2,4))
oa.design(nlevels=c(6,4,2,2,2))
oa.design(nlevels=c(6,4,2,2,2,2))
oa.design(nlevels=c(6,6))
oa.design(nlevels=c(6,6,3))
oa.design(nlevels=c(5,5))
oa.design(nlevels=c(5,5,3))
oa.design(nlevels=c(5,5,1))
oa.design(nlevels=c(5,5,2))
oa.design(nlevels=c(5,5,5))
oa.design(nlevels=c(5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5,5))
oa.design(nlevels=c(5,5,5,5,5,5))
oa.design(nlevels=c(4,3,2,2,5))
library(conjoint)
setwd("/home/sagun/GITHUB/titanic")
ls
setwd("/home/sagun/GITHUB/titanic")
setwd("/home/sagun/GITHUB/titanic")
testData <- read.csv("test.csv", header = TRUE, stringsAsFactors = FALSE)
trainData <- read.csv("train.csv", header = TRUE, stringsAsFactors = FALSE)
head(trainData)
head(testData)
plot(density(trainData$Age, na.rm = TRUE))
plot(density(trainData$Fare, na.rm = TRUE))
head(trainData)
plot(density(trainData$Fare, na.rm = TRUE))
plot(density(trainData$Age, na.rm = TRUE))
plot(density(trainData$Fare, na.rm = TRUE))
plot(density(trainData$Age, na.rm = TRUE))
counts <- table(trainData$Survived, trainData$Sex)
barplot(counts, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
counts[2] / (counts[1] + counts[2])
counts[4] / (counts[3] + counts[4])
counts
count[2]
counts[2]
counts[1]
counts[3]
counts[4]
Pclass_survival <- table(trainData$Survived, trainData$Pclass)
barplot(Pclass_survival, xlab = "Cabin Class", ylab = "Number of People",
main = "survived and deceased between male and female")
Pclass_survival[2] / (Pclass_survival[1] + Pclass_survival[2])
Pclass_survival[4] / (Pclass_survival[3] + Pclass_survival[4])
Pclass_survival[6] / (Pclass_survival[5] + Pclass_survival[6])
Pclass_survival
c(1,9:12)]
c(1,9:12)
trainData = trainData[-c(1,9:12)]
trainData
View(trainData)
trainData$Sex = gsub("female", 1, trainData$Sex)
trainData$Sex = gsub("^male", 0, trainData$Sex)
master_vector = grep("Master.",trainData$Name, fixed=TRUE)
miss_vector = grep("Miss.", trainData$Name, fixed=TRUE)
mrs_vector = grep("Mrs.", trainData$Name, fixed=TRUE)
mr_vector = grep("Mr.", trainData$Name, fixed=TRUE)
dr_vector = grep("Dr.", trainData$Name, fixed=TRUE)
view(master_vector)
View(master_vector)
master_vector
for(i in master_vector) {
trainData$Name[i] = "Master"
}
for(i in miss_vector) {
trainData$Name[i] = "Miss"
}
for(i in mrs_vector) {
trainData$Name[i] = "Mrs"
}
for(i in mr_vector) {
trainData$Name[i] = "Mr"
}
for(i in dr_vector) {
trainData$Name[i] = "Dr"
}
for (i in 1:nrow(trainData)) {
if (is.na(trainData[i,5])) {
if (trainData$Name[i] == "Master") {
trainData$Age[i] = master_age
} else if (trainData$Name[i] == "Miss") {
trainData$Age[i] = miss_age
} else if (trainData$Name[i] == "Mrs") {
trainData$Age[i] = mrs_age
} else if (trainData$Name[i] == "Mr") {
trainData$Age[i] = mr_age
} else if (trainData$Name[i] == "Dr") {
trainData$Age[i] = dr_age
} else {
print("Uncaught Title")
}
}
}
master_age = round(mean(trainData$Age[trainData$Name == "Master"], na.rm = TRUE), digits = 2)
miss_age = round(mean(trainData$Age[trainData$Name == "Miss"], na.rm = TRUE), digits =2)
mrs_age = round(mean(trainData$Age[trainData$Name == "Mrs"], na.rm = TRUE), digits = 2)
mr_age = round(mean(trainData$Age[trainData$Name == "Mr"], na.rm = TRUE), digits = 2)
dr_age = round(mean(trainData$Age[trainData$Name == "Dr"], na.rm = TRUE), digits = 2)
for (i in 1:nrow(trainData)) {
if (is.na(trainData[i,5])) {
if (trainData$Name[i] == "Master") {
trainData$Age[i] = master_age
} else if (trainData$Name[i] == "Miss") {
trainData$Age[i] = miss_age
} else if (trainData$Name[i] == "Mrs") {
trainData$Age[i] = mrs_age
} else if (trainData$Name[i] == "Mr") {
trainData$Age[i] = mr_age
} else if (trainData$Name[i] == "Dr") {
trainData$Age[i] = dr_age
} else {
print("Uncaught Title")
}
}
}
trainData["Child"]
trainData
trainData["Child"]
for (i in 1:nrow(trainData)) {
if (trainData$Age[i] <= 12) {
trainData$Child[i] = 1
} else {
trainData$Child[i] = 2
}
}
trainData["Child"]
trainData["Family"] = NA
for(i in 1:nrow(trainData)) {
x = trainData$SibSp[i]
y = trainData$Parch[i]
trainData$Family[i] = x + y + 1
}
trainData["Family"]
testData["Mother"] = NA
for(i in 1:nrow(testData)) {
if(testData[i, 2] == "Mrs" & testData[i, 6] > 0) {
testData[i, 9] = 1
} else {
testData[i, 9] = 2
}
}
testData
trainData
View(trainData)
View(testData)
testData["Mother"] = NA
for(i in 1:nrow(testData)) {
if(testData[i, 2] == "Mrs" & testData[i, 6] > 0) {
testData[i, 9] = 1
} else {
testData[i, 9] = 2
}
}
trainData["Mother"]
testData["Mother"]
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + Family + Mother, family = binomial, data = trainData)
clear all
